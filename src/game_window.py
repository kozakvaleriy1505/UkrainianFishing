import pygame
import json
import os
from layout import SCENE_AREA, BOTTOM_PANEL, TOP_PANEL, TENSION_AREA, SIDE_PANEL, INFO_PANEL
from widgets import tension_meter, info_panel

def run(screen, save_path):
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —à—Ä–∏—Ñ—Ç—ñ–≤
    font = pygame.font.SysFont("arial", 48)
    small_font = pygame.font.SysFont("arial", 24)

    # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —ñ–∫–æ–Ω–∫—É –º–∞–ø–∏ (–ø—ñ–∑–Ω—ñ—à–µ –º–æ–∂–Ω–∞ –º—ñ–Ω—è—Ç–∏ –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –ª–æ–∫–∞—Ü—ñ—ó)
    try:
        map_icon = pygame.image.load("assets/icons/map.png")
        map_icon = pygame.transform.scale(map_icon, (64, 64))
    except Exception as e:
        print(f"[!] –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —ñ–∫–æ–Ω–∫—É –º–∞–ø–∏: {e}")
        map_icon = None

    # –ê–∫—Ç–∏–≤–Ω—ñ –≤–∫–ª–∞–¥–∫–∏
    active_info_tab = "–ß–∞—Ç"
    active_inventory_tab = "–°–Ω–∞—Å—Ç—ñ"

    # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é
    try:
        with open(save_path, "r", encoding="utf-8") as f:
            profile = json.load(f)
    except Exception as e:
        print(f"[!] –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å: {e}")
        return

    # –¢–∞–π–º–µ—Ä –≥—Ä–∏
    from time_manager import TimeManager
    time = TimeManager(profile["time"])

    # –ö–Ω–æ–ø–∫–∏ –∑–≤–µ—Ä—Ö—É
    save_text = small_font.render("–ó–±–µ—Ä–µ–∂", True, (255, 255, 255))
    save_rect = save_text.get_rect(topright=(880, 10))
    menu_text = small_font.render("–ú–µ–Ω—é", True, (255, 255, 255))
    menu_rect = menu_text.get_rect(topright=(980, 10))

    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ü–∏–∫–ª—É
    waiting = True
    import time as pytime
    last_tick = pytime.time()
    tick_interval = 1

    # –Ü–Ω–≤–µ–Ω—Ç–∞—Ä
    inventory_items = ["–°–Ω–∞—Å—Ç—ñ", "–†–µ—á—ñ", "–ù–æ—Ç–∞—Ç–Ω–∏–∫", "–°–∞–¥–æ–∫", "–á–∂–∞"]
    inventory_rects = []

    # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ–∫–æ–Ω–æ–∫ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—è
    inventory_icons = {
        "–°–Ω–∞—Å—Ç—ñ": "assets/icons/tackle.png",
        "–†–µ—á—ñ": "assets/icons/items.png",
        "–ù–æ—Ç–∞—Ç–Ω–∏–∫": "assets/icons/notebook.png",
        "–°–∞–¥–æ–∫": "assets/icons/cage.png",
        "–á–∂–∞": "assets/icons/food.png"
    }
    loaded_icons = {}
    for name, path in inventory_icons.items():
        try:
            icon = pygame.image.load(path)
            icon = pygame.transform.scale(icon, (48, 48))
            loaded_icons[name] = icon
        except Exception as e:
            print(f"[!] –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —ñ–∫–æ–Ω–∫—É '{name}': {e}")

    # –ì–æ–ª–æ–≤–Ω–∏–π —Ü–∏–∫–ª
    while waiting:
        # –û–Ω–æ–≤–ª—é—î–º–æ —ñ–≥—Ä–æ–≤–∏–π —á–∞—Å
        now = pytime.time()
        if now - last_tick >= tick_interval:
            time.tick(1)
            last_tick = now

        # –ë–µ–∫–≥—Ä–∞—É–Ω–¥
        screen.fill((50, 80, 120))

        # –û—Å–Ω–æ–≤–Ω–∞ —Å—Ü–µ–Ω–∞
        pygame.draw.rect(screen, (70, 100, 130), SCENE_AREA)
        scene_text = small_font.render("–õ–æ–∫–∞—Ü—ñ—è: –¢—É—Ä–∏—Å—Ç–∏—á–Ω–∞ –±–∞–∑–∞", True, (255, 255, 255))
        screen.blit(scene_text, (SCENE_AREA.x + 20, SCENE_AREA.y + 20))

        # –ù–∏–∂–Ω—è –ø–∞–Ω–µ–ª—å —ñ–∫–æ–Ω–æ–∫ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—è
        pygame.draw.rect(screen, (30, 40, 60), BOTTOM_PANEL)
        inventory_rects.clear()
        for i, item in enumerate(inventory_items):
            x = BOTTOM_PANEL.x + 20 + i * 80
            y = BOTTOM_PANEL.y + 20
            rect = pygame.Rect(x, y, 48, 48)
            inventory_rects.append((item, rect))

            icon = loaded_icons.get(item)
            if icon:
                screen.blit(icon, (x, y))
            else:
                label = small_font.render(item, True, (200, 200, 200))
                screen.blit(label, (x, y))

            # –ü—ñ–¥—Å–≤—ñ—á—É–≤–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—ó –≤–∫–ª–∞–¥–∫–∏
            if item == active_inventory_tab:
                pygame.draw.rect(screen, (0, 200, 255), rect, 2)

        # –ë–æ–∫–æ–≤–∞ –ø–∞–Ω–µ–ª—å
        pygame.draw.rect(screen, (40, 50, 70), SIDE_PANEL)
        pygame.draw.rect(screen, (80, 100, 130), SIDE_PANEL, 2)

        # –Ü–∫–æ–Ω–∫–∞ –º–∞–ø–∏
        if map_icon:
            map_x = SIDE_PANEL.x + 18
            map_y = SIDE_PANEL.y + 60
            screen.blit(map_icon, (map_x, map_y))
            map_rect = pygame.Rect(map_x, map_y, 64, 64)


        # –ü–æ—Å–∏–ª–∞–Ω–Ω—è "–ù–∞ –±–∞–∑—É"
        link_font = pygame.font.SysFont("arial", 20)
        link_text = link_font.render("–ù–∞ –±–∞–∑—É", True, (0, 200, 255))
        link_rect = link_text.get_rect(center=(SIDE_PANEL.x + 50, SIDE_PANEL.y + 240))
        screen.blit(link_text, link_rect)

        # –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω–∏–π –±–ª–æ–∫
        side_font = pygame.font.SysFont("arial", 18)
        location_label = "–õ–æ–∫–∞—Ü—ñ—è:"
        location_value = profile["location"]["spot"]
        days_label = "–ó–∞–ª–∏—à–æ–∫ –¥–Ω—ñ–≤:"
        days_value = str(profile.get("meta", {}).get("days_paid", 0))

        screen.blit(side_font.render(location_label, True, (255, 255, 255)),
                    (SIDE_PANEL.x + 10, SIDE_PANEL.y + 350))
        screen.blit(side_font.render(location_value, True, (200, 200, 200)),
                    (SIDE_PANEL.x + 10, SIDE_PANEL.y + 370))

        screen.blit(side_font.render(days_label, True, (255, 255, 255)),
                    (SIDE_PANEL.x + 10, SIDE_PANEL.y + 400))
        screen.blit(side_font.render(days_value, True, (200, 200, 200)),
                    (SIDE_PANEL.x + 10, SIDE_PANEL.y + 420))

        # –í—ñ–∫–Ω–æ —á–∞—Ç/–ø–æ–¥—ñ—ó/–≥—Ä–∞–≤—Ü—ñ
        info_panel.draw(screen, INFO_PANEL, active_tab=active_info_tab)

        # –í—ñ–¥–∂–µ—Ç –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞ —Å–Ω–∞—Å—Ç—ñ
        tension_meter.draw(screen, TENSION_AREA, tension=60, line=20, reel=90)

        # –°—Ç–∞—Ç—É—Å–∏ –≥—Ä–∞–≤—Ü—è
        saturation = profile["stats"]["saturation"]
        alcohol = profile["stats"]["alcohol_level"]
        status_text = small_font.render(
            f"–ì–æ–ª–æ–¥: {saturation}% | –û–ø‚Äô—è–Ω—ñ–Ω–Ω—è: {alcohol:.1f}", True, (255, 255, 255)
        )
        screen.blit(status_text, (BOTTOM_PANEL.x + 20, BOTTOM_PANEL.y + 70))

        # –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø—Ä–æ—Ñ—ñ–ª—å
        text = font.render(f"–ì—Ä–∞–≤–µ—Ü—å: {profile['nickname']}", True, (255, 255, 255))
        screen.blit(text, (200, 200))
        money_text = font.render(f"–ì—Ä–æ—à—ñ: {profile['money']} –≥—Ä–Ω", True, (255, 255, 0))
        screen.blit(money_text, (200, 260))

        # –í–µ—Ä—Ö–Ω—è –ø–∞–Ω–µ–ª—å —á–∞—Å—É
        top_text = small_font.render(
            f"{time.get_weekday()} | {time.get_time_str()} | {profile['money']} –≥—Ä–Ω",
            True, (255, 255, 255)
        )
        top_rect = top_text.get_rect(topleft=(20, 20))
        screen.blit(top_text, top_rect)

        # –ö–Ω–æ–ø–∫–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —ñ –º–µ–Ω—é
        screen.blit(save_text, save_rect)
        screen.blit(menu_text, menu_rect)

        pygame.display.flip()

        # –û–±—Ä–æ–±–∫–∞ –ø–æ–¥—ñ–π
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                waiting = False

            elif event.type == pygame.KEYDOWN and event.key == pygame.K_ESCAPE:
                waiting = False

            elif event.type == pygame.MOUSEBUTTONDOWN and event.button == 1:
                x, y = event.pos

                # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é
                if save_rect.collidepoint((x, y)):
                    print("[‚úì] –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é (–∑–∞–≥–ª—É—à–∫–∞)")

                # –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤ –º–µ–Ω—é
                elif menu_rect.collidepoint((x, y)):
                    print("[‚Ü©] –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")
                    try:
                        import main
                        main.main()
                    except Exception as e:
                        print(f"[!] –ù–µ –≤–¥–∞–ª–æ—Å—è –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å —É –º–µ–Ω—é: {e}")
                    waiting = False

                if map_rect.collidepoint((x, y)):
                    print("–í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –≤—ñ–∫–Ω–æ –º–∞–ø–∏")
                    try:
                        from inventory_tabs import map_window  # –∞–±–æ –≤–∞—à –º–æ–¥—É–ª—å
                        map_window.run(screen, profile)
                    except Exception as e:
                        print(f"[!] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—ñ –º–∞–ø–∏: {e}")


                # –ü–µ—Ä–µ—Ö—ñ–¥ "–ù–∞ –±–∞–∑—É"
                elif link_rect.collidepoint((x, y)):
                    print("[‚Ü™] –ì—Ä–∞–≤–µ—Ü—å –ø–æ–≤–µ—Ä—Ç–∞—î—Ç—å—Å—è –Ω–∞ –±–∞–∑—É")
                    # TODO: –∑–º—ñ–Ω–∏—Ç–∏ profile["location"]

                # –í–∫–ª–∞–¥–∫–∏ "–ß–∞—Ç / –ü–æ–¥—ñ—ó / –ì—Ä–∞–≤—Ü—ñ"
                elif INFO_PANEL.collidepoint(x, y):
                    rel_x = x - INFO_PANEL.x
                    if 10 <= rel_x <= 70:
                        active_info_tab = "–ß–∞—Ç"
                    elif 80 <= rel_x <= 150:
                        active_info_tab = "–ü–æ–¥—ñ—ó"
                    elif 160 <= rel_x <= 230:
                        active_info_tab = "–ì—Ä–∞–≤—Ü—ñ"

                # –Ü–Ω–≤–µ–Ω—Ç–∞—Ä–Ω—ñ –≤–∫–ª–∞–¥–∫–∏
                else:
                    for item, rect in inventory_rects:
                        if rect.collidepoint((x, y)):
                            active_inventory_tab = item
                            print(f"[üì¶] –ê–∫—Ç–∏–≤–Ω–∞ –≤–∫–ª–∞–¥–∫–∞: {item}")
                            try:
                                if item == "–°–Ω–∞—Å—Ç—ñ":
                                    from inventory_tabs import tackle_tab
                                    tackle_tab.run(screen, profile)
                                elif item == "–†–µ—á—ñ":
                                    from inventory_tabs import items_tab
                                    items_tab.run(screen, profile)
                                elif item == "–ù–æ—Ç–∞—Ç–Ω–∏–∫":
                                    from inventory_tabs import notebook_tab
                                    notebook_tab.run(screen, profile)
                                elif item == "–°–∞–¥–æ–∫":
                                    from inventory_tabs import cage_tab
                                    cage_tab.run(screen, profile)
                                elif item == "–á–∂–∞":
                                    from inventory_tabs import food_tab
                                    food_tab.run(screen, profile)
                            except Exception as e:
                                print(f"[!] –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–∫—Ä–∏—Ç–∏ –≤–∫–ª–∞–¥–∫—É '{item}': {e}")
    # –ö—ñ–Ω–µ—Ü—å while waiting